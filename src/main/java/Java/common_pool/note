一、池对象工厂(PooledObjectFactory、KeyedPooledObjectFactory接口):
用来创建池对象，将不用的池对象进行钝化(passivateObject)，对要使用的池对象进行激活(activeObject)，
对池对象进行验证(validateObject)，对有问题的池对象进行销毁(destroyObject)等工作。
1️⃣PooledObject makeObject():这个方法是用来创建一个对象。
             当在GenericObjectPool类中调用borrowObject方法时，如果当前对象池中没有空闲的对象，
             GenericObjectPool会调用这个方法，创建一个对象，并把这个对象封装到PooledObject类中，并交给对象池管理。
2️⃣void destroyObject(PooledObject p):销毁对象。
             当对象池检测到某个对象的空闲时间(idle)超时，或使用完对象归还到对象池之前被检测到对象已经无效时，就会调用这个方法销毁对象。
             对象的销毁一般和业务相关，但必须明确的是，当调用这个方法之后，对象的生命周期必须结果。
             如果是对象是线程，线程必须已结束，如果是socket，socket必须已close，如果是文件操作，文件数据必须已flush，且文件正常关闭。
3️⃣boolean validateObject(PooledObject p):检测一个对象是否有效。
             在对象池中的对象必须是有效的，这个有效的概念是，从对象池中拿出的对象是可用的。
             在从对象池获取对象或归还对象到对象池时，会调用这个方法，判断对象是否有效，如果无效就会销毁。
             比如，如果是socket，那么必须保证socket是连接可用的。
4️⃣void activateObject(PooledObject p):激活一个对象或者说启动对象的某些操作。
               它会在检测空闲对象的时候，如果设置了测试空闲对象是否可以用，就会调用这个方法，在borrowObject的时候也会调用。
               另外，如果对象是一个包含参数的对象，可以在这里进行初始化。让使用者感觉这是一个新创建的对象一样。
               比如，如果对象是socket，如果socket没有连接，或意外断开了，可以在这里启动socket的连接。
5️⃣void passivateObject(PooledObject p):钝化一个对象。
             在向对象池归还一个对象是会调用这个方法。这里可以对对象做一些清理操作。比如清理掉过期的数据，下次获得对象时，不受旧数据的影响。

一般来说 activateObject 和 passivateObject 是成对出现的。前者是在对象从对象池取出时做一些操作，后者是在对象归还到对象池做一些操作。

二、PooledObject 接口
定义了getCreateTime获取PooledObject创建时间，getActiveTimeMillis获取PooledObject处于激活状态的时间，
getIdleTimeMillis获取PooledObject空闲时间，getLastBorrowTime获取PooledObject最近借出时间，
getLastReturnTime获取PooledObject最近归还时间，getLastUsedTime获取PooledObject最近使用时间。
目前Apache commons-pool2提供了2个默认实现DefaultPooledObject和PooledSoftReference，一般使用DefaultPooledObject即可。


三、对象池
对象池接口ObjectPool和KeyedObjectPool类关系：
对象池的5个具体实现类GenericObjectPool、GenericKeyedObjectPool、SoftReferenceObjectPool、ProxiedObjectPool、ProxiedKeyedObjectPool，
这5个对象池按照实现的接口不同分为2类，一个是实现了接口ObjectPool，另一个是实现了接口KeyedObjectPool。
GenericObjectPool、GenericKeyedObjectPool:
                 可配置LIFO/FIFO行为的ObjectPool的实现。默认采用LIFO队列方式。
                 这意味着当有闲置的可用对象在对象池中时，borrowObject方法会返回最近的实例。
                 如果配置文件中的LIFO配置项的值为false，则将返回相反排序的实例，也就是会返回最先进入对象池的对象的实例。
SoftReferenceObjectPool:
                 使用LIFO行为实现的ObjectPool。此外，在这个对象池实现中，每个对象都会被包装到一个SoftReference中。
                 SoftReference允许垃圾回收机制在需要释放内存时回收对象池中的对象。
ProxiedObjectPool:
                 使用CGLIB或者JDK自带动态代理技术，代理由GenericObjectPool或者SoftReferenceObjectPool产生的ObjectPool对象。
ProxiedKeyedObjectPool:
                 使用CGLIB或者JDK自带动态代理技术，代理由GenericKeyedObjectPool产生的ObjectPool对象。


四、GenericObjectPoolConfig 配置
maxTotal：对象池中管理的最多对象个数。默认值是8。
maxIdle：对象池中最大的空闲对象个数。默认值是8。
minIdle：对象池中最小的空闲对象个数。默认值是0。
maxWaitMillis：当没有空闲连接时，获取一个对象的最大等待时间。
              值小于0，则永不超时，一直等待，直到有空闲对象到来。
              值大于0，则等待maxWaitMillis长时间，如果等待时间内没有空闲对象，将抛出NoSuchElementException异常。
              默认值是-1；可以根据需要自己调整，单位是毫秒。
blockWhenExhausted：当对象池没有空闲对象时，新的获取对象的请求是否阻塞。true阻塞。默认值是true;
minEvictableIdleTimeMillis：对象最小的空闲时间。这个参数是强制性的，只要空闲时间超过这个值，就会移除。
                           值小于等于0，取Long的最大值，
                           值大于0，当空闲的时间大于这个值时，执行移除这个对象操作。
                           默认值是1000L * 60L * 30L，即30分钟。
softMinEvictableIdleTimeMillis：对象最小的空闲时间。
                               值小于等于0，取Long的最大值，
                               值大于0，当对象的空闲时间超过这个值，并且当前空闲对象的数量大于最小空闲数量(minIdle)时，执行移除操作。
                               这个和上面的minEvictableIdleTimeMillis的区别是，它会保留最小的空闲对象数量。
                               而上面的不会，是强制性移除的。
                               默认值是-1；
numTestsPerEvictionRun：检测空闲对象线程每次检测的空闲对象的数量。
                        默认值是3。如果值小于0，则每次检测的空闲对象数量等于当前空闲对象数量除以这个值的绝对值，并对结果向上取整。
testOnCreate：在创建对象时检测对象是否有效，true是，默认值是false。
testOnBorrow：在从对象池获取对象时是否检测对象有效，true是；默认值是false。
testOnReturn：在向对象池中归还对象时是否检测对象有效，true是，默认值是false。
testWhileIdle：在检测空闲对象线程检测到对象不需要移除时，是否检测对象的有效性。true是，默认值是false。
timeBetweenEvictionRunsMillis：空闲对象检测线程的执行周期，即多长时候执行一次空闲对象检测，单位是毫秒数。
                              如果小于等于0，则不执行检测线程。默认值是-1;
lifo：对象池存储空闲对象是使用的LinkedBlockingDeque，它本质上是一个支持FIFO和FILO的双向的队列，
      common-pool2中的LinkedBlockingDeque不是Java原生的队列，而是common-pool2重新写的一个双向队列。
      如果为true，表示使用FIFO获取对象。默认值是true.建议使用默认值。
fairness：common-pool2实现的LinkedBlockingDeque双向阻塞队列使用的是Lock锁。
         这个参数就是表示在实例化一个LinkedBlockingDeque时，是否使用lock的公平锁。默认值是false，建议使用默认值。


《Apache commons-pool2-2.4.2源码学习笔记》-- https://blog.csdn.net/zilong_zilong/article/details/78556281
《common-pool2的介绍和使用》-- https://blog.csdn.net/Tiffany_J/article/details/121488229